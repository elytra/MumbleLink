buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath 'org.ajoberstar:gradle-git:0.9.0'
    }
}

ext.mcversion = "1.9.4"
ext.forgeversion = "12.17.0.1990"
version = "5.0.0"

apply plugin: 'net.minecraftforge.gradle.forge'


archivesBaseName = "$name"

minecraft {
    version = mcversion + "-" + forgeversion
    mappings = "snapshot_20160627"
    runDir = "run"
}

import java.text.SimpleDateFormat;
import org.ajoberstar.grgit.*


ext.actualVersion = version

if (System.getenv("RELEASE") != null) {
    version = "${minecraft.version}-$version"
} else if (System.getenv("BUILD_NUMBER") != null) {
    version = "${minecraft.version}-$version." + System.getenv("BUILD_NUMBER")
    actualVersion += "." + System.getenv("BUILD_NUMBER")
} else if (new File(rootProject.projectDir, '.git').exists()) {       
    ext.repo = Grgit.open(rootProject.projectDir)
    version = "${minecraft.version}-$version-${repo.log().find().abbreviatedId}"
    actualVersion += "-${repo.log().find().abbreviatedId}"
} else {
    version = "${minecraft.version}-$version"
}

processResources {
    inputs.files("build.gradle")

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'
        include '**/*.lang'
        include '**/*.txt' // buggy matching of marker symbols

        expand([
                'version': actualVersion,
                'mcversion': mcversion,
                'forgeversion': forgeversion,
                'date': new SimpleDateFormat("yyyy-MM-dd").format(new Date()),
        ])
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
        exclude '**/*.lang'
        exclude '**/*.txt' // buggy matching of marker symbols
    }
}

project.subprojects.each { p ->
    p.tasks.withType(Jar)*.each { t ->
        t.destinationDir = new File(rootProject.getBuildDir(), 'libs')
    }
}

jar {
    from zipTree('jars/natives.jar')
    manifest {
        attributes 'Implementation-Title': rootProject.name
        attributes 'Implementation-Version': rootProject.actualVersion
    }
}
